#!/bin/bash
set -eo pipefail
source $(dirname $0)/config/paths.sh

mkdir -p $app_dir
mkdir -p $env_dir
mkdir -p $cache_root
mkdir -p $buildpack_root
mkdir -p $build_root/.profile.d

# Use 1000 as default user
if [[ -n "$DOKKU_RANDOM_USER_ID" ]]; then
  DOKKU_USER_ID="${DOKKU_USER_ID:-$((RANDOM+1000))}"
else
  DOKKU_USER_ID="${DOKKU_USER_ID:-1000}"
fi

if [[ "$DOKKU_USER_ID" -ne "0" ]]; then
  user_id="$DOKKU_USER_ID"
  user_name="u${user_id}"

  echo $'\e[1G----->' "Using $user_name to run an application"

  # Create a random user
  /usr/sbin/addgroup --quiet --gid $user_id $user_name
  /usr/sbin/adduser --shell /bin/bash \
                    --disabled-password \
                    --force-badname \
                    --no-create-home \
                    --uid $user_id \
                    --gid $user_id \
                    --gecos '' \
                    --quiet \
                    --home $app_dir \
                    $user_name
else
  user_id="0"
  user_name="root"

  echo $'\e[1G----->' " Using ROOT to run an application (potentially insecure)"
fi

# Grant the user access to all required paths before
# running the compile phase as non-privileged user.
chgrp $user_name /dev
chown $user_name:$user_name /dev/shm /tmp /var/tmp
chown -R $user_name:$user_name  $app_dir \
                                $env_dir \
                                $cache_root \
                                $buildpack_root \
                                $build_root

# Compile the slug
/usr/bin/setuidgid $user_name /build/compile.sh

## Generate start commands
cat > /start <<EOF
#!/bin/bash
export HOME=$app_dir
chown -R $user_name:$user_name $app_dir
cd $app_dir

for file in .profile.d/*.sh; do
  source \$file
done
hash -r

case "\$(basename \$0)" in
  start)
    [[ ! -f Procfile ]] && ruby -e "require 'yaml';File.write('Procfile', (YAML.load_file('.release')['default_process_types'] || {}).to_yaml)" 
    command="foreman start --procfile=Procfile \$@"
    ;;
  *)
    command="\$@"
    ;;
esac

if [[ -z "\$command" ]]; then
  echo "Missing command (\$@)"
  exit 1
fi

exec setuidgid $user_name \$(eval echo \${command})
EOF

chmod +x /start
ln -nsf /start /exec
rm -rf $app_dir
mv $build_root $app_dir

# Clean up
rm -rf /build/
rm -rf /tmp/*
